services:
  bot:
    build:
      dockerfile: build/Dockerfile-bot
    env_file:
      - .env
    depends_on:
      - postgresql
      - migrations
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: on-failure

  bot_manager:
    build:
      dockerfile: build/Dockerfile-bot_manager
    env_file:
      - .env
    depends_on:
      - postgresql
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: on-failure

  api:
    build:
      dockerfile: build/Dockerfile-api
    env_file:
      - .env
    depends_on:
      - postgresql
      - bot
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ${PATH_TO_STATIC_DIR}:/static
    restart: on-failure

  postgresql:
    image: postgres:latest
    command: postgres -c 'max_connections=999'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgresql-data-test:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    build:
      dockerfile: build/Dockerfile-migrations
#    command: bash -c 'alembic upgrade head'
    restart: no
    depends_on:
      - postgresql
    env_file:
      - .env

  nginx:
    command: nginx -g "daemon off;"
    depends_on:
      - api
      - bot
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8100:80"

volumes:
  postgresql-data-test: